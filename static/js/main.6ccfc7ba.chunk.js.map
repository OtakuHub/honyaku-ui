{"version":3,"sources":["pages/Home/index.js","components/Navbar/index.js","components/Search/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Home","props","state","Component","NavigationBar","loggedIn","this","Navbar","bg","expand","Brand","to","Toggle","aria-controls","Collapse","id","Nav","className","Link","Search","Button","variant","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yUAiBeA,E,kDAdb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAMjB,OACE,6BACE,+C,GATWC,a,gBC6DJC,G,wDAzDb,WAAYH,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXG,UAAU,GAHK,E,qDAOT,IACAA,EAAaC,KAAKJ,MAAlBG,SACR,OACE,kBAACE,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,KACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,YAIF,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMP,GAAG,UAAT,UAIF,kBAACK,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMP,GAAG,SAAT,UAIF,kBAACK,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMP,GAAG,eAAT,iBAKJ,kBAACK,EAAA,EAAD,CAAKC,UAAU,uBACZZ,GACC,kBAACW,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMP,GAAG,WAAT,YAKFN,GACA,kBAACW,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMP,GAAG,mBAAT,kB,GA9CYR,c,QCmBbgB,G,wDAnBb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAMjB,OACE,6BACE,kBAACkB,EAAA,EAAD,CACEC,QAAQ,kBACRJ,UAAU,UAFZ,e,GATad,c,MCeNmB,MAZf,WACE,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,IAAIC,UAAWzB,OCDrB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6ccfc7ba.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>honyaku ui</h1>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport './style.sass';\n\nclass NavigationBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n    };\n  }\n\n  render() {\n    const { loggedIn } = this.state;\n    return (\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand>\n          <Link to=\"/\">\n            Honyaku\n          </Link>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link>\n              <Link to=\"/anime\">\n                Anime\n              </Link>\n            </Nav.Link>\n            <Nav.Link>\n              <Link to=\"manga\">\n                manga\n              </Link>\n            </Nav.Link>\n            <Nav.Link>\n              <Link to=\"/lightnovel\">\n                Light Novel\n              </Link>\n            </Nav.Link>\n          </Nav>\n          <Nav className=\"justify-content-end\">\n            {loggedIn && (\n              <Nav.Link>\n                <Link to=\"/logout\">\n                  Logout\n                </Link>\n              </Nav.Link>\n            )}\n            {!loggedIn && (\n              <Nav.Link>\n                <Link to=\"/authentication\">\n                  Signup\n                </Link>\n              </Nav.Link>\n            )}\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default NavigationBar;\n","import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport './style.sass';\n\nclass Search extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        <Button\n          variant=\"outline-primary\"\n          className=\"search\"\n        >\n          Search\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from '../../pages/Home';\nimport Navbar from '../Navbar';\nimport Search from '../Search';\nimport './style.sass';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Search />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}