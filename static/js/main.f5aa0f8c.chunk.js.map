{"version":3,"sources":["components/WorkCard/index.js","components/WorkCardList/index.js","services/api.js","services/queries/homePage.js","pages/Home/index.js","pages/Work/index.js","components/Filter/index.js","components/Sorting/index.js","services/queries/categoryPage.js","pages/Category/index.js","services/queries/searchPage.js","pages/Search/index.js","components/Navbar/index.js","history.js","components/SearchButton/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["WorkCard","id","title","coverImage","description","genres","Card","style","minWidth","marginTop","Img","height","objectFit","variant","src","Body","Title","Subtitle","Text","dangerouslySetInnerHTML","__html","substring","Link","to","WorkCardList","workList","Row","map","work","Col","key","romaji","large","join","axios","create","baseURL","getTrendingForHomepage","a","api","post","query","response","error","anime","data","media","manga","lightnovel","hasLoaded","Home","props","state","this","getTrendingMedia","setState","className","Component","Work","image","cellSpacing","alt","type","action","htmlFor","Filter","filterOptions","value","displayName","name","filters","Sort","sortOptions","sorts","getCategoryWork","mediaType","variables","results","Page","Category","prevProps","location","pathname","params","match","workType","categoryName","toUpperCase","message","Jumbotron","Container","getSearchResults","search","Search","searchQuery","getSearchQueryFromURL","URLSearchParams","get","handleSearch","NavigationBar","loggedIn","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","createBrowserHistory","basename","SearchButton","handleShow","show","handleClose","handleSeach","target","handleSubmit","event","preventDefault","history","push","Button","onClick","Modal","onHide","Header","closeButton","Form","Group","controlId","Label","Control","placeholder","onChange","Footer","App","fluid","exact","path","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f5aa0f8c.chunk.js","sourcesContent":["import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nconst WorkCard = ({ id, title, coverImage, description, genres }) => (\n  <Card style={{ minWidth: '15rem', marginTop: '1rem' }}>\n    <Card.Img\n      style={{ height: '15rem', objectFit: 'cover' }}\n      variant=\"top\"\n      src={coverImage}\n    />\n    <Card.Body>\n      <Card.Title>\n        {title}\n      </Card.Title>\n      <Card.Subtitle>\n        {genres}\n      </Card.Subtitle>\n      <Card.Text\n        dangerouslySetInnerHTML={{ __html: description.substring(0, 100) }}\n      />\n      <Card.Link>\n        <Link to={`/work/${id}`}>\n          Read More\n        </Link>\n      </Card.Link>\n    </Card.Body>\n  </Card>\n);\n\nexport default WorkCard;\n","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport WorkCard from '../WorkCard';\n\nconst WorkCardList = ({ workList }) => (\n  <Row>\n    {workList.map((work) => (\n      <Col>\n        <WorkCard\n          key={work.id}\n          id={work.id}\n          title={work.title.romaji}\n          coverImage={work.coverImage.large}\n          genres={work.genres.join(', ')}\n          description={work.description}\n        />\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default WorkCardList;\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://graphql.anilist.co',\n});\n","import api from '../api';\n\nconst query = `\nquery {\n  anime: Page(perPage: 5) {\n    media(type: ANIME sort: TRENDING_DESC) {\n      ...cardFieldItems\n    }\n  }\n  manga: Page(perPage: 5) {\n    media(type: MANGA, sort:TRENDING_DESC) {\n     ...cardFieldItems\n    }\n  }\n  lightnovel: Page(perPage: 5) {\n    media(sort: TRENDING_DESC) {\n      ...cardFieldItems\n    }\n  }\n}\n\nfragment cardFieldItems on Media {\n  type\n  id\n  title {\n    romaji\n    english\n    native\n  }\n  coverImage {\n    large\n  }\n  genres\n  description(asHtml: true)\n}\n`;\n\nconst getTrendingForHomepage = async () => {\n  try {\n    const response = await api.post('/', { query });\n    return {\n      error: null,\n      anime: response.data.data.anime.media,\n      manga: response.data.data.manga.media,\n      lightnovel: response.data.data.lightnovel.media,\n      hasLoaded: true,\n    };\n  } catch (error) {\n    return {\n      error,\n      hasLoaded: true,\n    };\n  }\n};\n\nexport default getTrendingForHomepage;\n","import React, { Component } from 'react';\nimport WorkCardList from '../../components/WorkCardList';\nimport getTrendingForHomepage from '../../services/queries/homePage';\nimport './style.sass';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      hasLoaded: false,\n      anime: [],\n      manga: [],\n      lightnovel: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getTrendingMedia();\n  }\n\n  async getTrendingMedia() {\n    const response = await getTrendingForHomepage();\n    return this.setState({ ...response });\n  }\n\n  render() {\n    const { error, anime, manga, lightnovel, hasLoaded } = this.state;\n    if (!hasLoaded) {\n      return (<p>Loading content</p>);\n    }\n    if (error) {\n      return (<p>{error}</p>);\n    }\n    return (\n      <div>\n        <div className=\"section\">\n          <h4>Light Novels</h4>\n          <WorkCardList workList={lightnovel} />\n        </div>\n        <div className=\"section\">\n          <h4>Manga</h4>\n          <WorkCardList workList={manga} />\n        </div>\n        <div className=\"section\">\n          <h4>Anime</h4>\n          <WorkCardList workList={anime} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n\nclass Work extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      work: {\n        title: 'Gintama',\n        image: 'https://m.media-amazon.com/images/M/MV5BMDkxZTJjZTEtMDRjMy00Yzk1LWI5YjItMjIwYmVlYzhlZWZhXkEyXkFqcGdeQXVyNDQxNjcxNQ@@._V1_UY1200_CR85,0,630,1200_AL_.jpg',\n        description: 'The Amanto, aliens from outer space,... ',\n        genres: [\n          'Drama',\n          'Comedy',\n          'Action',\n        ],\n      },\n    };\n  }\n\n  render() {\n    const { work } = this.state;\n    return (\n      <div>\n        <table cellSpacing=\"30\">\n          <tr>\n            <td>\n              <img\n                src={work.image}\n                alt=\"Gintama Anime Poster\"\n              />\n            </td>\n            <td>\n              <h1>{work.title}</h1>\n              <p>\n                <center>\n                  {work.description}\n                </center>\n              </p>\n              <center>\n                <h4>\n                  <p>Genres</p>\n                </h4>\n              </center>\n              <center>\n                <p>\n                  {work.genres.join(', ')}\n                </p>\n              </center>\n              <button type=\"button\">\n                Join as Translator\n              </button>\n            </td>\n          </tr>\n        </table>\n        <hr />\n        <h2>Comment Section</h2>\n        <form action=\"#\">\n          <label htmlFor=\"comment\">\n            Your comment:\n          </label>\n          <input type=\"text\" id=\"comment\" />\n          <button type=\"submit\">\n            Submit\n          </button>\n        </form>\n        <p>\n          Click the Submit button and your comment will be posted.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Work;\n","import React, { Component } from 'react';\n\nclass Filter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterOptions: [\n        { value: 'genre', displayName: 'Select Genre' },\n        { value: 'action', displayName: 'Action' },\n        { value: 'adventure', displayName: 'Adventure' },\n        { value: 'comedy', displayName: 'Comdey' },\n        { value: 'drama', displayName: 'Drama' },\n        { value: 'isekai', displayName: 'Isekai' },\n        { value: 'romance', displayName: 'Romance' },\n        { value: 'thriller', displayName: 'Thriller' },\n      ],\n    };\n  }\n\n  render() {\n    const { filterOptions } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"filter\">Filter</label>\n        <select name=\"filter\" id=\"genrefilter\">\n          {filterOptions.map((filters) => (\n            <option value={filters.value}>{filters.displayName}</option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default Filter;\n","import React, { Component } from 'react';\n\nclass Sort extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sortOptions: [\n        { value: 'defult', displayName: 'Default' },\n        { value: 'date', displayName: 'Date' },\n        { value: 'liked', displayName: 'Most Liked' },\n        { value: 'followed', displayName: 'Most Followed' },\n      ],\n    };\n  }\n\n  render() {\n    const { sortOptions } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"sorting\">Sort</label>\n        <select name=\"sorting\" id=\"sort\">\n          {sortOptions.map((sorts) => (\n            <option value={sorts.value}>{sorts.displayName}</option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default Sort;\n","import api from '../api';\n\nconst query = `\n  query($mediaType: MediaType) {\n    Page(perPage: 20) {\n      media(type: $mediaType, sort: TRENDING_DESC) {\n        type\n        id\n        title {\n          romaji\n          english\n          native\n        }\n        coverImage {\n          large\n        }\n        genres\n        description(asHtml: true)\n      }\n    }\n  }\n`;\n\nconst getCategoryWork = async (mediaType) => {\n  try {\n    const variables = { mediaType };\n    const response = await api.post('/', {\n      query,\n      variables,\n    });\n    return {\n      error: null,\n      results: response.data.data.Page.media,\n      hasLoaded: true,\n    };\n  } catch (error) {\n    return {\n      error,\n      hasLoaded: true,\n    };\n  }\n};\n\nexport default getCategoryWork;\n","import React, { Component } from 'react';\nimport { Jumbotron, Container } from 'react-bootstrap';\nimport Filter from '../../components/Filter';\nimport Sort from '../../components/Sorting';\nimport WorkCardList from '../../components/WorkCardList';\nimport getCategoryWork from '../../services/queries/categoryPage';\nimport './style.sass';\n\nclass Category extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasLoaded: false,\n      results: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getTrendingMedia();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      this.getTrendingMedia();\n    }\n  }\n\n  async getTrendingMedia() {\n    const { match: { params } } = this.props;\n    const workType = params.categoryName.toUpperCase();\n    const response = await getCategoryWork(workType);\n    return this.setState({ ...response });\n  }\n\n  render() {\n    const { error, hasLoaded, results } = this.state;\n    const { match: { params } } = this.props;\n\n    if (!hasLoaded) {\n      return (<p>Loading</p>);\n    }\n\n    if (error) {\n      return (<p>{error.message}</p>);\n    }\n\n    return (\n      <div>\n        <Jumbotron>\n          <Container>\n            <h1>\n              Most trending:&nbsp;\n              <span>{params.categoryName}</span>\n            </h1>\n          </Container>\n        </Jumbotron>\n        <Filter />\n        <Sort />\n        <WorkCardList workList={results} />\n      </div>\n    );\n  }\n}\n\nexport default Category;\n","import api from '../api';\n\nconst query = `\n  query($search: String) {\n    Page(perPage: 10) {\n      media(search: $search) {\n        id\n        title {\n          romaji\n          english\n          native\n        }\n        coverImage {\n          large\n        }\n        genres\n        description(asHtml: true)\n      }\n    }\n  }\n`;\n\nconst getSearchResults = async (search) => {\n  try {\n    const variables = { search };\n    const response = await api.post('/', {\n      query,\n      variables,\n    });\n    return {\n      error: null,\n      results: response.data.data.Page.media,\n      hasLoaded: true,\n    };\n  } catch (error) {\n    return {\n      error,\n      hasLoaded: true,\n    };\n  }\n};\n\nexport default getSearchResults;\n","import React, { Component } from 'react';\nimport WorkCardList from '../../components/WorkCardList';\nimport getSearchResults from '../../services/queries/searchPage';\n\nclass Search extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchQuery: '',\n      results: [],\n      hasLoaded: false,\n    };\n  }\n\n  componentDidMount() {\n    this.getSearchQueryFromURL();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location.search !== prevProps.location.search) {\n      this.getSearchQueryFromURL();\n    }\n  }\n\n  getSearchQueryFromURL() {\n    const { search } = this.props.location;\n    const searchQuery = new URLSearchParams(search).get('query');\n    this.setState({ searchQuery }, () => {\n      this.handleSearch();\n    });\n  }\n\n  async handleSearch() {\n    const response = await getSearchResults(this.state.searchQuery);\n    return this.setState({ ...response });\n  }\n\n  render() {\n    const { error, searchQuery, hasLoaded, results } = this.state;\n    return (\n      <div className=\"\">\n        <h4>\n          Search Results:\n          <span>{searchQuery}</span>\n        </h4>\n        {error && <p>{error.message}</p>}\n        {!hasLoaded && <p>Loading</p>}\n        <WorkCardList workList={results} />\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport './style.sass';\n\nclass NavigationBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n    };\n  }\n\n  render() {\n    const { loggedIn } = this.state;\n    return (\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand>\n          <Link to=\"/\">\n            Honyaku\n          </Link>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link>\n              <Link to=\"/category/anime\">\n                Anime\n              </Link>\n            </Nav.Link>\n            <Nav.Link>\n              <Link to=\"/category/manga\">\n                manga\n              </Link>\n            </Nav.Link>\n            <Nav.Link>\n              <Link to=\"/category/lightnovel\">\n                Light Novel\n              </Link>\n            </Nav.Link>\n          </Nav>\n          <Nav className=\"justify-content-end\">\n            {loggedIn && (\n              <Nav.Link>\n                <Link to=\"/logout\">\n                  Logout\n                </Link>\n              </Nav.Link>\n            )}\n            {!loggedIn && (\n              <Nav.Link>\n                <Link to=\"/authentication\">\n                  Signup\n                </Link>\n              </Nav.Link>\n            )}\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default NavigationBar;\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory({ basename: '/honyaku-ui' });\n","import React, { Component } from 'react';\nimport { Button, Form, Modal } from 'react-bootstrap';\nimport history from '../../history';\nimport Filter from '../Filter';\nimport './style.sass';\n\nclass SearchButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: false,\n      query: '',\n    };\n  }\n\n  handleShow = () => this.setState({ show: true });\n\n  handleClose = () => this.setState({ show: false });\n\n  handleSeach = ({ target }) => {\n    this.setState({ query: `${target.value}` });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    history.push(`/search?query=${this.state.query}`);\n    this.handleClose();\n    this.setState({ query: '' });\n  }\n\n  render() {\n    const { show, query } = this.state;\n    return (\n      <div>\n        <Button\n          variant=\"warning\"\n          className=\"search\"\n          onClick={this.handleShow}\n        >\n          Search\n        </Button>\n        <Modal show={show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Find what you are looking for</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form>\n              <Form.Group controlId=\"formSearch\">\n                <Form.Label>\n                  Search\n                </Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Enter an anime, manga or light novel title\"\n                  value={query}\n                  onChange={this.handleSeach}\n                />\n              </Form.Group>\n              <Form.Group>\n                <Filter />\n              </Form.Group>\n              <Button\n                variant=\"outline-success\"\n                type=\"submit\"\n                onClick={this.handleSubmit}\n              >\n                Search\n              </Button>\n            </Form>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"outline-danger\"\n              onClick={this.handleClose}\n            >\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default SearchButton;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport Home from '../../pages/Home';\nimport Work from '../../pages/Work';\nimport Category from '../../pages/Category';\nimport Search from '../../pages/Search';\nimport Navbar from '../Navbar';\nimport SearchButton from '../SearchButton';\nimport './style.sass';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <SearchButton />\n      <Container fluid=\"md\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/work/:id\" component={Work} />\n          <Route path=\"/category/:categoryName\" component={Category} />\n          <Route exact path=\"/search\" component={Search} />\n        </Switch>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport history from './history';\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}